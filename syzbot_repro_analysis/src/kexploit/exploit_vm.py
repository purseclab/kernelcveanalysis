from pathlib import Path
from pwn import process
import subprocess
import os

from .data import vm_data_dir, download_file_if_not_exist, write_file_if_not_exists
from .kernel_image import Kernel

def initrd_path() -> Path:
    path = Path(os.path.join(vm_data_dir(), 'ramdisk_v1.img'))
    download_file_if_not_exist(path, 'https://storage.googleapis.com/kernelctf-build/files/ramdisk_v1.img')
    return path

def disk_image_path() -> Path:
    path = Path(os.path.join(vm_data_dir(), 'rootfs_v3.img'))
    if not path.exists():
        download_file_if_not_exist(Path(f'{path}.gz'), 'https://storage.googleapis.com/kernelctf-build/files/rootfs_v3.img.gz')
        subprocess.run(['gzip', '-d', str(path)], check=True)

    return path

def flag_file_path() -> Path:
    path = Path(os.path.join(vm_data_dir(), 'flag.txt'))
    write_file_if_not_exists(path, 'kernelCTF{example_flag}')
    return path

def run_qemu(kernel: Kernel, exploit: Path, mitigations: bool = False) -> process:
    if mitigations:
        mitigation_args = 'sysctl.kernel.dmesg_restrict=1 sysctl.kernel.kptr_restrict=2 sysctl.kernel.unprivileged_bpf_disabled=2 sysctl.net.core.bpf_jit_harden=1 sysctl.kernel.yama.ptrace_scope=1'
    else:
        mitigation_args = ''
    
    kernel_args = f'console=ttyS0 root=/dev/vda1 rootfstype=ext4 rootflags=rw init=/bin/sh hostname={kernel.kernelctf_kernel_name() or 'linux'} {mitigation_args}'

    return process([
        'qemu-system-x86_64',
        '-m', '3.5G',
        '-nographic',
        '-no-reboot',
        '-monitor', 'none',
        '-enable-kvm',
        '-cpu', 'host',
        '-smp', 'cores=2',
        '-kernel', str(kernel.image_path()),
        '-initrd', str(initrd_path()),
        '-nic', 'user,model=virtio-net-pci',
        '-drive', f'file={str(disk_image_path())},if=virtio,cache=none,aio=native,format=raw',
        '-drive', f'file={str(flag_file_path())},if=virtio,format=raw,readonly',
        '-drive', f'file={str(exploit)},if=virtio,format=raw,readonly',
        '-append', kernel_args,
    ])

def test_exploit(kernel: Kernel, exploit: Path, test_success: bool = True) -> bool:
    qemu = run_qemu(kernel, exploit, 'mitigation' in kernel.name)

    def command(command_str, prefix='# '):
        qemu.sendlineafter(prefix.encode(), command_str.encode())
        # receive command string we just sent
        qemu.recvline()

    def command_user(command_str):
        command(command_str, '$ ')

    command('cd /home/user')
    command('cp /dev/vdc exploit')
    command('chmod +x exploit')
    command('chown user:user exploit')
    command('su user')
    command_user('/home/user/exploit')

    if test_success:
        try:
            command('id')
            result = qemu.recvline().decode('ascii')

            if 'root' in result.strip():
                print('Exploit succeeded')
                return True
        except EOFError:
            pass

        print('Exploit failed')
        return False
    else:
        qemu.interactive()
        return True
