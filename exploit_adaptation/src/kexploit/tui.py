from dataclasses import dataclass

from rich.console import Console
from rich.prompt import Confirm

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .parse import Span, LexedCode

@dataclass
class SrcCodeError:
    message: str
    span: 'Span'
    code: 'LexedCode'

class KexploitConsole:
    def __init__(self):
        self.console = Console(highlight=False)
    
    def print_diff(self, diff: str):
        self.console.print('=' * 30 + ' DIFF ' + '=' * 30)

        for line in diff.splitlines():
            if line.startswith('-'):
                color = 'red'
            elif line.startswith('+'):
                color = 'green'
            elif line.startswith('@@'):
                color = 'blue'
            else:
                color = ''

            self.console.print(line, style=color)
    
    def confirm_diff(self, diff: str) -> bool:
        self.print_diff(diff)
        return Confirm.ask('Apply diff?')
    
    def error(self, message: str):
        self.console.print(f'[red bold]Error:[/red bold] {message}')
    
    def src_code_error(self, code_error: SrcCodeError):
        # TODO: handle multiline span
        line_info = code_error.code.get_line(code_error.span.start_index)
        column_index = code_error.span.start_index - line_info.line_start_index
        span_length = code_error.span.end_index - code_error.span.start_index
        left_padding_amount = len(str(line_info.line_number)) + 1

        self.console.print('[red bold]Error')
        self.console.print(f' [blue]-->[/blue] {code_error.code.filename}:{line_info.line_number}:{column_index + 1}')
        self.console.print(' ' * left_padding_amount + '[blue]|[/blue]')
        self.console.print(f'[blue]{line_info.line_number} |[/blue] {line_info.line}')
        self.console.print(' ' * left_padding_amount + '[blue]|[/blue] ' + ' ' * column_index + '[red bold]' + '^' * span_length + f' {code_error.message}[/red bold]')
        self.console.print()
    
    def print_errors(self, errors: list[SrcCodeError]):
        self.console.print()
        for error in errors:
            self.src_code_error(error)

console = KexploitConsole()