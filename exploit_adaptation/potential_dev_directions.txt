Potential ways forward for improving kexploit:

LLM based:
Use LLM much more extensively for all types of annotations,
and provide it mcp server for tasks such as accessing symbols and information about the kernel binary,
as well as an mcp server for accessing information about kernel source code.

This is probably not very hard to develop, but less sure if results will be good.
However reading about some CRS from AIxCC, some of them use LLM extensively and were competitive with traditional approaches,
so perhaps it is viable.


Based on dynamic properties:
Run original exploit against original kernel.
Collect information such as instruction trace through the kernel, and perhaps some way of tracing how data in kernel is shaped by these syscalls?

Now running against new kernel, collect similar information, and find where the kernel state devieates, and try to trace that back to code in exploit?

Will probably have to parse entire exploit code into some IR, and perform adaptations on the IR


Current approach, but extended:
Currently just based on a bunch of random hueristics, not very smart but works for many cases, since in many cases not much needs to be changed.
Perhaps good enough?


Hybrid approach?
