from pathlib import Path
from typing import Optional

from .kernel_image import KernelAdapter, AdaptError, Kernel
from .parse import LexedCode, Token, ReplaceResult, RawAnnotation, ExploitFileGroup, ExploitFileError, DiffMode
from .tui import console

def apply_adaptations(adapter: KernelAdapter, input: LexedCode) -> str:
    def rewrite(tokens: list[Token], token_index: int) -> ReplaceResult:
        raw_annotation = RawAnnotation.parse(tokens, token_index)
        if raw_annotation is None:
            return ReplaceResult.skip()
        annotation = raw_annotation.to_annotation()
        
        try:
            new_code = annotation.adapt_to_code(adapter)
        except AdaptError as e:
            return ReplaceResult.error(e.message, tokens[token_index])
        
        return ReplaceResult.replace(raw_annotation.token_count(), new_code)
    
    adapted_code, errors = input.replace_tokens(rewrite)
    console.print_errors(errors)
    return adapted_code

def adapt(exploit_files: list[Path], old_kernel: Optional[Kernel], new_kernel: Kernel, diff_output: Optional[Path], diff_mode: DiffMode):
    files = ExploitFileGroup(exploit_files)

    if old_kernel is None:
        try:
            old_kernel = files.get_src_kernel()
        except ExploitFileError as e:
            console.error(f'Could not determine old kernel: {e.message}')
            return

    adapter = KernelAdapter(old_kernel, new_kernel)
    
    files.rewrite_files(
        lambda code: apply_adaptations(adapter, code),
        diff_output=diff_output,
        diff_mode=diff_mode,
    )