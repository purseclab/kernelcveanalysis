# Pulls buts from syzkaller syzbot and filters for interesting looking ones

from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn, TimeRemainingColumn, MofNCompleteColumn
import csv

from .bug_db import SyzkallBugDatabase
from .scrape import pull_bugs
from .run_bug import test_repro_crashes

def pull(kernel_name: str):
    db = SyzkallBugDatabase()

    try:
        pull_bugs(db, kernel_name)
    finally:
        db.close()

def query():
    db = SyzkallBugDatabase()
    bugs = db.get_all_bugs()

    for bug in bugs:
        # print(bug.description)
        # print(bug.kernel_name)
        # if 'android' not in bug.kernel_name:
        #     continue
        print(f'{bug.bug_id}: {bug.title} ({bug.crash_time})')

def test_all():
    db = SyzkallBugDatabase()
    console = Console()
    table = Table(title="Syzkaller Bug Test Results")
    table.add_column("Bug ID", style="cyan", no_wrap=True)
    table.add_column("Description", style="magenta")
    table.add_column("Compiled", justify="center")
    table.add_column("Crash Occurred", justify="center", style="red")

    bugs = db.get_all_bugs()
    if not bugs:
        console.print("[red]No bugs found in the database.[/red]")
        return

    results = []

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        MofNCompleteColumn(),  # Shows progress like 12/100
        TimeRemainingColumn(),
        transient=True
    ) as progress:
        task = progress.add_task("Testing bugs...", total=len(bugs))

        for idx, bug in enumerate(bugs, 1):
            metadata = db.get_bug_metadata(bug.bug_id)
            if metadata is None:
                row = [str(bug.bug_id), "Invalid ID", "‚ùå", "N/A"]
                table.add_row(*row)
                results.append(row)
                progress.advance(task)
                continue

            description = metadata.description
            progress.update(
                task,
                description=f"[{idx}/{len(bugs)}] Testing Bug ID {bug.bug_id}: {description[:50]}"
            )

            try:
                repro_path = metadata.compile_repro('arm64')
                compiled = "‚úÖ"
            except Exception:
                compiled = "‚ùå"
                repro_path = None

            crashed = "‚ùå"
            if repro_path:
                progress.update(
                    task,
                    description=f"[{idx}/{len(bugs)}] Running repro for Bug ID {bug.bug_id}: {description[:50]}"
                )
                try:
                    if test_repro_crashes(repro_path):
                        crashed = "üí•"
                except Exception:
                    crashed = "‚ùå"

            row = [str(bug.bug_id), description, compiled, crashed]
            table.add_row(*row)
            results.append(row)
            progress.advance(task)

    console.print(table)

    # Write results to CSV file
    csv_file = "bug_test_results.csv"
    with open(csv_file, mode="w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["Bug ID", "Description", "Compiled", "Crash Occurred"])
        writer.writerows(results)

    console.print(f"[green]Results saved to [bold]{csv_file}[/bold][/green]")

# def test_all():
#     db = SyzkallBugDatabase()
#     console = Console()
#     table = Table(title="Syzkaller Bug Test Results")
#     table.add_column("Bug ID", style="cyan", no_wrap=True)
#     table.add_column("Description", style="magenta")
#     table.add_column("Compiled", justify="center")
#     table.add_column("Crash Occurred", justify="center", style="red")

#     bugs = db.get_all_bugs()
#     if not bugs:
#         console.print("[red]No bugs found in the database.[/red]")
#         return

#     with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}"), transient=True) as progress:
#         task = progress.add_task("Testing bugs...", total=len(bugs))

#         for bug in bugs:
#             metadata = db.get_bug_metadata(bug.bug_id)
#             if metadata is None:
#                 table.add_row(str(bug.bug_id), "Invalid ID", "‚ùå", "N/A")
#                 progress.advance(task)
#                 continue

#             description = metadata.description
#             try:
#                 repro_path = metadata.compile_repro('arm64')
#                 compiled = "‚úÖ"
#             except Exception as e:
#                 compiled = "‚ùå"
#                 repro_path = None

#             crashed = "‚ùå"
#             if repro_path:
#                 try:
#                     if test_repro_crashes(repro_path):
#                         crashed = "üí•"
#                 except Exception as e:
#                     crashed = "‚ùå"

#             table.add_row(str(bug.bug_id), description, compiled, crashed)
#             progress.advance(task)

#     console.print(table)

def test(id: str):
    db = SyzkallBugDatabase()
    metadata = db.get_bug_metadata(id)
    if metadata is None:
        print('Invalid bug id supplied')
        return
    
    print(f'Compiling {metadata.description}...')
    repro_path = metadata.compile_repro('arm64')

    if test_repro_crashes(repro_path):
        print('Crash occured')
    else:
        print('No crash occured')