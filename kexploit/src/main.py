from pathlib import Path
from typing import List
from typing_extensions import Annotated
from difflib import unified_diff
import os

import typer

from kernel_image import KernelAdapter
from rewrite_rules import gen_rewrite_rules, apply_rewrites
from parse import lex

app = typer.Typer()

@app.command()
def adapt(
    exploit_files: Annotated[List[Path], typer.Argument(help="C source code files of exploit to adapt")],
    old_kernel: Annotated[Path, typer.Option(help="Original kernel exploit was made for")],
    new_kernel: Annotated[Path, typer.Option(help="New kernel to adapt exploit to")],
    o: Annotated[Path, typer.Option(help="Output file for exploit diff")] = Path("new_exploit.diff"),
):
    diff = ''

    adapter = KernelAdapter(old_kernel, new_kernel)
    rewrites = gen_rewrite_rules(adapter)

    for file in exploit_files:
        # if kexploit.h is globbed in exploit_files, ignore
        if os.path.basename(file) == 'kexploit.h':
            continue

        with open(file, 'r') as f:
            exploit_code = f.read()

        lexed_code = lex(exploit_code)
        new_code = apply_rewrites(rewrites, lexed_code)

        for diff_line in unified_diff(
            exploit_code.split('\n'),
            new_code.split('\n'),
            fromfile=str(file),
            tofile=str(file),
            lineterm='',
        ):
            diff += diff_line + '\n'

    print(diff)

    with open(o, 'w') as f:
        f.write(diff)

@app.command()
def annotate(
    exploit_files: Annotated[List[Path], typer.Argument(help="C source code files of exploit to annotate")],
):
    for file in exploit_files:
        # if kexploit.h is globbed in exploit_files, ignore
        if os.path.basename(file) == 'kexploit.h':
            continue

        with open(file, 'r') as f:
            exploit_code = f.read()

if __name__ == "__main__":
    app()
