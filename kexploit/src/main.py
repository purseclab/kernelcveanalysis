from pathlib import Path
from typing_extensions import Annotated

import typer

from kernel_image import KernelAdapter
from rewrite_rules import gen_rewrite_rules, apply_rewrites

def main(
    exploit: Annotated[Path, typer.Argument(help="C source code of exploit to adapt")],
    old_kernel: Annotated[Path, typer.Option(help="Original kernel exploit was made for")],
    new_kernel: Annotated[Path, typer.Option(help="New kernel to adapt exploit to")],
    o: Annotated[Path, typer.Option(help="Output file for rewritten code")] = Path("new_exploit.c"),
):
    with open(exploit, 'r') as f:
        exploit_code = f.read()
    
    adapter = KernelAdapter(old_kernel, new_kernel)
    rewrites = gen_rewrite_rules(adapter)
    new_code = apply_rewrites(rewrites, exploit_code)

    with open(o, 'w') as f:
        f.write(new_code)

if __name__ == "__main__":
    typer.run(main)
