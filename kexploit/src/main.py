from pathlib import Path
from typing import List
from typing_extensions import Annotated
from difflib import unified_diff

import typer

from kernel_image import KernelAdapter
from rewrite_rules import gen_rewrite_rules, apply_rewrites

def main(
    exploit_files: Annotated[List[Path], typer.Argument(help="C source code files of exploit to adapt")],
    old_kernel: Annotated[Path, typer.Option(help="Original kernel exploit was made for")],
    new_kernel: Annotated[Path, typer.Option(help="New kernel to adapt exploit to")],
    o: Annotated[Path, typer.Option(help="Output file for exploit diff")] = Path("new_exploit.diff"),
):
    diff = ''

    for file in exploit_files:
        with open(file, 'r') as f:
            exploit_code = f.read()

        adapter = KernelAdapter(old_kernel, new_kernel)
        rewrites = gen_rewrite_rules(adapter)
        new_code = apply_rewrites(rewrites, exploit_code)

        for diff_line in unified_diff(
            exploit_code.split('\n'),
            new_code.split('\n'),
            fromfile=str(file),
            tofile=str(file),
            lineterm='',
        ):
            diff += diff_line + '\n'

    with open(o, 'w') as f:
        f.write(diff)

if __name__ == "__main__":
    typer.run(main)
