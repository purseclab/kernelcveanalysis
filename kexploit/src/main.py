from pathlib import Path
from typing_extensions import Annotated

import typer
from pycparser import c_ast, parse_file

from .kernel_image import KernelAdapter

KERNEL_ADDRESS = "__kexploit_kernel_address"
KERNEL_OFFSET = "__kexploit_kernel_offset"

class OffsetTranslationVisotor(c_ast.NodeVisitor):
    def __init__(self, adapter: KernelAdapter):
        self.adapter = adapter

    def visit_FuncCall(self, node):
        if node.name.name == KERNEL_ADDRESS:
            pass
        elif node.name.name == KERNEL_OFFSET:
            pass
        else:
            for child in node:
                self.visit(child)

def main(
    old_kernel: Annotated[Path, typer.Option(help="Original kernel exploit was made for")],
    new_kernel: Annotated[Path, typer.Option(help="New kernel to adapt exploit to")],
    exploit: Annotated[Path, typer.Argument(help="C source code of exploit to adapt")],
):
    ast = parse_file(
        exploit,
        use_cpp=True,
        # pycparser library can't parse __attribute__(()) syntax, and lots of header files may have this
        # so use define so preprocessor eliminates thiese attributes, since they are not needed when parsing
        cpp_args=["-D__attribute__(x)="],
    )
    ast.show()
    # print(ast)

if __name__ == "__main__":
    typer.run(main)
