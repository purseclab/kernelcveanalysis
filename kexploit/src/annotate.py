from pathlib import Path
from typing import List, Optional, Tuple
from difflib import unified_diff
import os

from parse import Literal, Token
from rewrite_rules import is_annotated
from parse import lex

def annotate(exploit_files: List[Path]):
    def do_annotate(tokens: List[Token], index: int) -> Optional[Tuple[int, str]]:
        match tokens[index].data:
            case Literal(int(address)):
                # don't annotate if already annotated
                if is_annotated(tokens, index):
                    return None
                
                # TODO: use different kernel address base for x86
                if address & 0xffffffc000000000 == 0xffffffc000000000:
                    return 1, f'__kexploit_kernel_address({hex(address)})'
        
        return None

    diff = ''

    for file in exploit_files:
        # if kexploit.h is globbed in exploit_files, ignore
        if os.path.basename(file) == 'kexploit.h':
            continue

        with open(file, 'r') as f:
            exploit_code = f.read()
        
        lexed_code = lex(file, exploit_code)
        annotated_code = lexed_code.replace_tokens(do_annotate)

        # diff just for user
        for diff_line in unified_diff(
            exploit_code.split('\n'),
            annotated_code.split('\n'),
            fromfile=str(file),
            tofile=str(file),
            lineterm='',
        ):
            diff += diff_line + '\n'

        with open(file, 'w') as f:
            f.write(annotated_code)
    
    print(diff)